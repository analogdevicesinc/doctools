name: Git Checkout
description: A git checkout for local runners and runs

inputs:
  gh-token:
    description: "GitHub Token"
    default: ${{ github.token }}

# behaviour:
# github.event.pull_request.head.sha is always used to detect the PR case.
# cache/ branches are created to avoid base refs from being garbage collected.
# on PRs, the github automatic merge commit is flattened, allowing to check per commit.

runs:
  using: composite
  steps:
    - name: Prepare git
      shell: bash
      run: |
        url="https://x-access-token:${{ inputs.gh-token }}@github.com/${{ github.repository }}.git"

        if [[ -f .git/shallow.lock ]] || [[ -f .git/index.lock ]]; then
          rm -rf -- ..?* .[!.]* *
        fi

        if [[ ! -d .git ]]; then
          git init --initial-branch=trunk .
          git config core.pager cat
          git remote add origin "$url"
        else
          git config core.pager cat
          git remote set-url origin "$url"

          git am --abort 2>/dev/null || true
          git merge --abort 2>/dev/null || true
          git rebase --abort 2>/dev/null || true
          git revert --abort 2>/dev/null || true
          git cherry-pick --abort 2>/dev/null || true
          git bisect reset 2>/dev/null || true

          git reset --hard --quiet
          git clean -ffdx --quiet .

          git checkout $(git rev-parse @) || true
          echo "clean-up branches"
          branches=$((git branch || true) | (grep -v ^'*' | grep -v ^'\s\+cache/' | grep -v ^'\s\+mirror/' || true))
          if [[ "$branches" ]]; then
            git branch -D $branches || true
          fi
          git branch -D trunk 2>/dev/null || true
          git checkout -b trunk
        fi

        if [[ -z "$(git config user.name)"  ]]; then
          git config user.name "github-actions[bot]"
        fi
        if [[ -z "$(git config user.email)"  ]]; then
          git config user.email "github-actions[bot]@users.noreply.github.com"
        fi

    - name: Get commit depth
      shell: bash
      run: |
        if [[ "${{ github.event.pull_request.head.sha }}" ]]; then
          echo "setting fetch_depth based on github.event.pull_request.head.sha"
          json=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ inputs.gh-token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/compare/${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }}" \
          | jq '{behind_by, ahead_by}')
          ahead_by=$(echo $json | jq '.ahead_by')
          behind_by=$(echo $json | jq '.behind_by')
          if [[ "$ahead_by" == "null" ]]; then
            echo "GitHub API failed, setting based on github.event.pull_request.commits + 100"
            ahead_by=${{ github.event.pull_request.commits }}
            echo "ahead_by=$ahead_by" >> $GITHUB_ENV
            fetch_depth=$(( ahead_by + 100 ))
          else
            echo "ahead_by=$ahead_by" >> $GITHUB_ENV
            fetch_depth=$(( ahead_by + behind_by + 2 ))
          fi
          echo "fetch_depth=$fetch_depth" >> $GITHUB_ENV
        elif [[ ! "${{ github.event.before }}" =~ "0000000000000000" ]] && [[ "${{ github.event.forced }}" == "false" ]]; then
          echo "setting fetch_depth based on github.event.before"
          commits_sha='${{ toJSON(github.event.commits.*.id) }}' ;
          fetch_depth=$(( $(jq <<<"$commits_sha" length) + 1 )) ;
          echo "fetch_depth=$fetch_depth" >> $GITHUB_ENV ;
        else
          echo "setting fetch_depth as 6 (fallback, either due to force-push, new-branch, or uncaught condition)"
          echo "fetch_depth=6" >> $GITHUB_ENV
          echo "fetch_depth_fallback=true" >> $GITHUB_ENV
        fi

    - name: Fetch & checkout
      shell: bash
      run: |
        git fetch origin --depth=$fetch_depth $GITHUB_SHA
        avail_depth=$(git rev-list --count $GITHUB_SHA)
        if [[ $fetch_depth -gt $avail_depth ]]; then
          echo "fetch_depth=$avail_depth" >> $GITHUB_ENV
        fi

        git reset --hard $GITHUB_SHA
        if [[ "${{ github.event.pull_request.head.sha }}" ]]; then
          # --empty was added on git 2.26.0
          has_keep=$(git rebase -help 2>&1 | grep "\--empty" | wc -l) || true
          echo $has_keep
          if [[ "$has_keep" -gt "0" ]]; then
            keep_empty="--empty=keep"
          else
            keep_empty="--keep-empty"
          fi
          git rebase $keep_empty @~
        else
          ahead_by=$((fetch_depth - 1))
          echo "ahead_by=$ahead_by" >> $GITHUB_ENV
        fi
        echo "head_sha=$(git rev-parse @)" >> "$GITHUB_ENV"
        echo "base_sha=$(git rev-parse @~$ahead_by)" >> "$GITHUB_ENV"

    - name: Log commit range
      shell: bash
      run: |
        git log --oneline --reverse $base_sha..$head_sha

    - name: Generate cache branches & rename
      shell: bash
      run: |
        if [[ "${{ github.event.pull_request.base.sha }}" ]]; then
          cache_branch=${{ github.base_ref }}
          cache_commit=${{ github.event.pull_request.base.sha }}
        else
          cache_branch=${{ github.ref_name }}
          cache_commit=$head_sha
        fi
        cache_branch=cache/$cache_branch
        git branch $cache_branch $cache_commit -f
        git branch -m $cache_branch || true
        git --no-pager branch
