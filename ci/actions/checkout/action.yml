name: Git Checkout
description: A git checkout for local runners and runs

inputs:
  depth:
    description: The depth when fetching
    required: false
  act-mountpoint:
    description: The source mountpoint
    default: '/mnt/repo'
  gh-token:
    description: 'GitHub Token'
    default: ${{ github.token }}
# env:
#   ACT_DEPTH: The depth when fetching, overwrites depth
#   ACT_HEAD: The head to fetch

# behaviour:
# github.event.pull_request.head.sha is always used to detect the PR case.
# cache/ branches are created to avoid base refs from being garbage collected.
# on PRs, the patch commits are cherry-picked, not merged.

runs:
  using: composite
  steps:
    - name: Get commit depth
      shell: bash
      run: |
        if [[ "${{ env.ACT }}" ]]; then
          if [[ "${{ env.ACT_DEPTH }}" ]]; then
            echo "setting fetch_depth based on env.ACT_DEPTH"
            echo "fetch_depth=$(( ${{ env.ACT_DEPTH }} + 1 ))" >> $GITHUB_ENV
          else
            echo "setting fetch_depth as 6 (fallback, consider setting ACT_DEPTH enviroment variable)"
            echo "fetch_depth=6" >> $GITHUB_ENV
          fi
        else
          if [[ "${{ inputs.depth }}" ]]; then
            echo "setting fetch_depth based on inputs.depth"
            echo "fetch_depth=$(( ${{ inputs.depth }} + 1 ))" >> $GITHUB_ENV
          elif [[ "${{ github.event.pull_request.commits }}" ]]; then
            echo "setting fetch_depth based on github.event.pull_request.commits"
            echo "fetch_depth=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> $GITHUB_ENV
          elif [[ ! "${{ github.event.before }}" =~ "0000000000000000" ]] && [[ "${{ github.event.forced }}" == "false" ]]; then
            echo "setting fetch_depth based on github.event.before"
            commits_sha='${{ toJSON(github.event.commits.*.id) }}' ;
            fetch_depth=$(( $(jq <<<"$commits_sha" length) + 1 )) ;
            echo "fetch_depth=$fetch_depth" >> $GITHUB_ENV ;
          else
            echo "setting fetch_depth as 6 (fallback, either force-push, push-new-branch, or unknown event type)"
            echo "fetch_depth=6" >> $GITHUB_ENV
            echo "fetch_depth_fallback=true" >> $GITHUB_ENV
          fi
        fi

        if [[ "${{ env.ACT }}" ]]; then
          if [[ "${{ env.ACT_HEAD }}" ]]; then
            act_head_sha="${{ env.ACT_HEAD }}"
          else
            act_head_sha="@"
          fi
          echo "head_sha=$(cd ${{ inputs.act-mountpoint }} ; git rev-parse $act_head_sha)" >> $GITHUB_ENV
        elif [[ "${{ github.event.pull_request.head.sha }}" ]]; then
          echo "head_sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
        elif [[ "${{ github.sha }}" ]]; then
          echo "head_sha=${{ github.sha }}" >> $GITHUB_ENV
        fi

    - name: Prepare git
      shell: bash
      run: |
        if [[ "${{ env.ACT }}" ]]; then
          url="file://${{ inputs.act-mountpoint }}"
        else
          url="https://x-access-token:${{ inputs.gh-token }}@github.com/${{ github.repository }}.git"
        fi

        if [[ ! -d .git ]]; then
          git init --initial-branch=trunk .
          git config core.pager cat
          git remote add origin "$url"
        else
          git config core.pager cat
          git remote set-url origin "$url"

          git am --abort 2>/dev/null || true
          git merge --abort 2>/dev/null || true
          git rebase --abort 2>/dev/null || true
          git revert --abort 2>/dev/null || true
          git cherry-pick --abort 2>/dev/null || true

          git reset --hard --quiet
          git clean -xf --quiet .

          git checkout $(git rev-parse @)
          echo "clean-up branches"
          branches=$((git branch || true) | (grep -v ^'*' | grep -v ^'\s\+cache/' || true))
          if [[ "$branches" ]]; then
            git branch -D $branches || true
          fi
          git branch -D trunk 2>/dev/null || true
          git checkout -b trunk
        fi

        if [[ -z "$(git config user.name)"  ]]; then
          git config user.name "github-actions[bot]"
        fi
        if [[ -z "$(git config user.email)"  ]]; then
          git config user.email "github-actions[bot]@users.noreply.github.com"
        fi

    - name: Checkout
      shell: bash
      run: |
        git fetch origin --depth=$fetch_depth $head_sha

        if [[ "${{ github.event.pull_request.head.sha }}" ]]; then
          git fetch origin --depth=1 ${{ github.base_ref }}
          git reset --hard origin/${{ github.base_ref }}
          # --empty was added on git 2.45.0
          has_keep=$(git cherry-pick 2>&1 | grep "\--empty" | wc -l) || true
          echo $has_keep
          if [[ "$has_keep" -gt "0" ]]; then
            keep_empty="--empty=keep"
          else
            keep_empty="--keep-redundant-commits"
          fi
          git cherry-pick --allow-empty $keep_empty $head_sha~$((fetch_depth - 1))..$head_sha
          echo "head_sha=$(git rev-parse @)" >> "$GITHUB_ENV"
        else
          git reset --hard $head_sha
        fi

        echo "base_sha=$(git rev-parse @~$((fetch_depth - 1)))" >> "$GITHUB_ENV"
        git log --oneline --reverse | head -200

    - name: Generate cache branches
      shell: bash
      run: |
        if [[ "${{ github.event.pull_request.head.sha }}" ]]; then
          cache_branch=${{ github.base_ref }}
          cache_commit=$(git rev-parse origin/${{ github.base_ref }})
        else
          cache_branch=${{ github.ref }}
          cache_commit=$head_sha
        fi
        cache_branch=cache/$cache_branch
        git branch $cache_branch $cache_commit -f
