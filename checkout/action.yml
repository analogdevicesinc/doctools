name: Git Checkout
description: A git checkout for local runners and runs

inputs:
  gh-token:
    description: "GitHub Token"
    default: ${{ github.token }}

# behaviour:
# cache/ branches are created to avoid base refs from being garbage collected.
# on PRs, the github automatic merge commit is flattened, allowing to check per commit.

runs:
  using: composite
  steps:
    - name: Prepare git
      shell: bash
      run: |
        # Prepare git
        url="https://x-access-token:${{ inputs.gh-token }}@github.com/${{ github.repository }}.git"

        if [[ -f .git/shallow.lock ]] || [[ -f .git/index.lock ]]; then
          rm -rf -- ..?* .[!.]* *
        fi

        if [[ ! -d .git ]]; then
          git init --initial-branch=trunk .
          git config core.pager cat
          git remote add origin "$url"
        else
          git config core.pager cat
          git remote set-url origin "$url"

          git am --abort 2>/dev/null || true
          git merge --abort 2>/dev/null || true
          git rebase --abort 2>/dev/null || true
          git revert --abort 2>/dev/null || true
          git cherry-pick --abort 2>/dev/null || true
          git bisect reset 2>/dev/null || true
          git stash clear || true

          git reset --hard --quiet
          git clean -ffdx --quiet .

          git switch -d 2>/dev/null || true
          echo "clean-up branches"
          branches=$((git branch || true) | (grep -v ^'*' | grep -v ^'\s\+cache/' | grep -v ^'\s\+mirror/' || true))
          if [[ "$branches" ]]; then
            git branch -D $branches || true
          fi
          git switch -C trunk
        fi

        if [[ -z "$(git config user.name)"  ]]; then
          git config user.name "github-actions[bot]"
        fi
        if [[ -z "$(git config user.email)"  ]]; then
          git config user.email "github-actions[bot]@users.noreply.github.com"
        fi

    - name: Get commit depth
      shell: bash
      run: |
        # Get commit depth
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          json=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ inputs.gh-token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/compare/${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }}" \
          | jq '{behind_by, ahead_by, merge_base_sha: .merge_base_commit.sha}')
          ahead_by=$(echo $json | jq '.ahead_by')
          behind_by=$(echo $json | jq '.behind_by')
          merge_base_sha=$(echo $json | jq '.merge_base_sha')
          if [[ "$merge_base_sha" == "null" ]]; then
            echo "::warning ::GitHub API failed to determine merge base sha, will checkout merge commit."
            echo "fetch_depth=2" >> $GITHUB_ENV
            echo "checkout_fallback=true" >> $GITHUB_ENV
          else
            fetch_depth=$(( ahead_by + behind_by + 2 ))
            echo "behind_by=$behind_by" >> $GITHUB_ENV
            echo "fetch_depth=$fetch_depth" >> $GITHUB_ENV
          fi
        elif [[ ! "${{ github.event.before }}" =~ "0000000000000000" ]] && [[ "${{ github.event.forced }}" == "false" ]]; then
          echo "setting fetch_depth based on github.event.before"
          commits_sha='${{ toJSON(github.event.commits.*.id) }}' ;
          fetch_depth=$(( $(jq <<<"$commits_sha" length) + 1 )) ;
          echo "fetch_depth=$fetch_depth" >> $GITHUB_ENV ;
        else
          if [[ "${{ github.event.before }}" =~ "0000000000000000" ]]; then
            echo "::notice ::New branch, will set base commit as last 5 commits."
          else
            echo "::notice ::Force pushed, will set base commit as last 5 commits."
          fi
          echo "fetch_depth=6" >> $GITHUB_ENV
          echo "checkout_fallback=true" >> $GITHUB_ENV
        fi

    - name: Fetch & reset
      shell: bash
      run: |
        # Fetch & reset
        # --empty was added on git 2.26.0
        has_keep=$(git rebase -help 2>&1 | grep "\--empty" | wc -l) || true
        echo $has_keep
        if [[ "$has_keep" -gt "0" ]]; then
          keep_empty="--empty=keep"
        else
          keep_empty="--keep-empty"
        fi

        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          if [[ "$checkout_fallback" == "true" ]]; then
            git fetch origin --depth=$fetch_depth $GITHUB_SHA
            git reset --hard $GITHUB_SHA
          elif [[ "$behind_by" -eq 0 ]]; then
            git fetch origin --depth=$fetch_depth ${{ github.event.pull_request.head.sha }}
            git reset --hard ${{ github.event.pull_request.head.sha }}
          else
            git fetch origin --depth=$fetch_depth $GITHUB_SHA
            git reset --hard ${{ github.event.pull_request.head.sha }}
            while ! git rebase --rebase-merges $keep_empty ${{ github.event.pull_request.base.sha }}; do
              git rebase --abort
              echo "deepening by $fetch_depth commits"
              git fetch origin --deepen=$fetch_depth $GITHUB_SHA
            done
          fi
        else
          git fetch origin --depth=$fetch_depth $GITHUB_SHA
          git reset --hard $GITHUB_SHA
        fi

        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          if [[ "$checkout_fallback" != "true" ]]; then
            base_sha=${{ github.event.pull_request.base.sha }}
          else
            base_sha=$(git rev-parse @~)
          fi
        else
          if [[ "$checkout_fallback" != "true" ]]; then
            base_sha=${{ github.event.before }}
          else
            base_sha=$(git rev-parse @~$((fetch_depth - 1)))
          fi
        fi

        if [[ "$checkout_fallback" != "true" ]]; then
          echo "Applying fixups"
          git rebase $keep_empty --rebase-merges --autosquash $base_sha \
            || git rebase --abort || true
        fi

        echo "head_sha=$(git rev-parse @)" >> "$GITHUB_ENV"
        echo "base_sha=$base_sha" >> "$GITHUB_ENV"

    - name: Log commit range
      shell: bash
      run: |
        # Log commit range
        git log --oneline --reverse $base_sha..$head_sha

    - name: Generate cache branches & rename
      shell: bash
      run: |
        # Generate cache branches & rename
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          branch=${{ github.base_ref }}
          commit=${{ github.event.pull_request.base.sha }}
        else
          branch=${{ github.ref_name }}
          commit=$head_sha
        fi
        git branch cache/$branch $commit -f
        git branch -m $branch 2>/dev/null || true
        git --no-pager branch
