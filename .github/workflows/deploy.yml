on:
  workflow_call:
    inputs:
      new_tag:
        default: false
        type: string
      tag:
        required: true
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  deploy:
    runs-on: [self-hosted, v1]
    permissions:
      id-token: write
      contents: write

    steps:
    - name: Get assets
      run: |
        curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L -o github-api.sh \
          https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/ci/github-api.sh
        curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L -o cloudsmith-api.sh \
          https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/ci/cloudsmith-api.sh

    - name: Ensure clean dist
      run: |
        rm -rf dist

    - uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist

    - name: Get others vars
      run: |
        asset_name=adi-doctools.tar.gz
        echo "asset_name=$asset_name" >> "$GITHUB_ENV"

        full_asset_name=$(find dist/ -maxdepth 1 -name "adi_doctools-*.tar.gz" -print -quit)
        echo "full_asset_name=$full_asset_name" >> "$GITHUB_ENV"

    - name: Get pre-release vars
      run: |
        source ./github-api.sh
        release_id=$(
          gh-get-release-id ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            pre-release \
                            pre_release_id
        )

        asset_id=$(
          gh-get-asset-id ${{ secrets.GITHUB_TOKEN }} \
                          ${{ github.repository }} \
                          $release_id \
                          pre_release_asset_id
        )

    - name: Get latest vars
      if: ${{ inputs.new_tag == 'true' }}
      run: |
        source ./github-api.sh
        release_id=$(
          gh-get-release-id ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            latest \
                            latest_id
        )

        asset_id=$(
          gh-get-asset-id ${{ secrets.GITHUB_TOKEN }} \
                          ${{ github.repository }} \
                          $release_id \
                          latest_asset_id
        )

    - name: GitHub create tag release and upload asset
      if: ${{ inputs.new_tag == 'true' }}
      run: |
        source ./github-api.sh
        gh-create-tag ${{ secrets.GITHUB_TOKEN }} \
                      ${{ github.repository }} \
                      ${{ inputs.tag }} \
                      ${{ github.sha }}

        release_id=$(
          gh-create-release ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            ${{ inputs.tag }} \
                            new_tag_release_id
        )

        gh-upload-asset ${{ secrets.GITHUB_TOKEN }} \
                        ${{ github.repository }} \
                        $release_id \
                        $asset_name \
                        $full_asset_name

    - name: GitHub update pre-release target commitish
      run: |
        source ./github-api.sh
        gh-update-commitish ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            ${{ github.sha }} \
                            $pre_release_id

    - name: GitHub upload pre-release asset
      run: |
        source ./github-api.sh
        if [[ ! "$pre_release_asset_id" == "" ]]; then
          gh-delete-asset ${{ secrets.GITHUB_TOKEN }} \
                          ${{ github.repository }} \
                          $pre_release_asset_id
        fi

        gh-upload-asset ${{ secrets.GITHUB_TOKEN }} \
                        ${{ github.repository }} \
                        $pre_release_id \
                        $asset_name \
                        $full_asset_name

    - name: GitHub update latest target commitish
      if: ${{ inputs.new_tag == 'true' }}
      run: |
        source ./github-api.sh
        gh-update-commitish ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            ${{ github.sha }} \
                            $latest_id

    - name: GitHub Upload latest asset
      if: ${{ inputs.new_tag == 'true' }}
      run: |
        source ./github-api.sh
        if [[ ! "$latest_asset_id" == "" ]]; then
          gh-delete-asset ${{ secrets.GITHUB_TOKEN }} \
                          ${{ github.repository }} \
                          $latest_asset_id
        fi

        gh-upload-asset ${{ secrets.GITHUB_TOKEN }} \
                        ${{ github.repository }} \
                        $latest_id \
                        $asset_name \
                        $full_asset_name

    - uses: cloudsmith-io/cloudsmith-cli-action@v1.0.4
      env:
        CLOUDSMITH_SERVICE_SLUG: ${{ secrets.CLOUDSMITH_SERVICE_SLUG }}
      if: ${{ env.CLOUDSMITH_SERVICE_SLUG != '' }}
      with:
        oidc-namespace: ${{ vars.CLOUDSMITH_NAMESPACE }}
        oidc-service-slug: ${{ secrets.CLOUDSMITH_SERVICE_SLUG }}
        oidc-auth-only: 'true'

    - name: Cloudsmith upload asset and create package
      if: ${{ env.CLOUDSMITH_API_KEY != '' }}
      run: |
        source ./cloudsmith-api.sh

        # push: refs/heads/<branch>
        # tag || release: refs/tags/<tag>
        # pull_request: refs/pull/<id>/merge
        tags_="${{ github.ref }}"
        if [[ "${{ github.ref }}" == refs/pull/* ]]; then
          tags_+=", refs/heads/${{ github.head_ref }}"
          tags_+=", refs/base/${{ github.base_ref }}"
        fi
        tags_+=", on/${{ github.event_name }}"

        package_file=$(
          cs-upload-package ${{ env.CLOUDSMITH_API_KEY }} \
                            ${{ vars.CLOUDSMITH_NAMESPACE }} \
                            ${{ vars.CLOUDSMITH_REPOSITORY }} \
                            $asset_name \
                            $full_asset_name \
                            latest_package_file
        )

        cs-package-store-python ${{ env.CLOUDSMITH_API_KEY }} \
                                ${{ vars.CLOUDSMITH_NAMESPACE }} \
                                ${{ vars.CLOUDSMITH_REPOSITORY }} \
                                $package_file \
                                $tags_

    - uses: analogdevicesinc/doctools/blank@action

    - name: Prepare gh-pages branch
      run: >
        git ls-remote --exit-code --heads origin refs/heads/gh-pages &&
        (
          git fetch origin gh-pages:gh-pages -f ;
          git switch gh-pages ;
          DOC_BUILDS=$(find . -mindepth 2 -name objects.inv -exec sh -c 'dirname {}' ';') ;
          git rm -r . --quiet || true ;
          printf "Detected doc builds: $DOC_BUILDS" ;
          if ! [ -z "$DOC_BUILDS" ]; then
            git checkout @ -- $DOC_BUILDS ;
          fi ;
          if [[ "${{ inputs.new_tag }}" == "1" ]]; then
            git rm -r ${{ inputs.tag }} --quiet || true ;
          fi ;
        ) || (
          git checkout --orphan gh-pages ;
          git reset --hard ;
          git commit -m "initial commit" --allow-empty
        )

    - uses: actions/download-artifact@v4
      with:
        name: html

    - uses: actions/download-artifact@v4
      if: ${{ inputs.new_tag == 'true' }}
      with:
        name: html-tagged
        path: ${{ inputs.tag }}

    - name: Generate aux files
      run: >
        touch .nojekyll ;
        find . -name objects.inv -exec sh -c 'dirname {}' ';' |
        cut -c 3- | sort -Vr |
        jq --raw-input . |
        jq --slurp . > tags.json

    - name: Commit and push to gh-pages
      run: |
        git add . >> /dev/null
        git commit -m "deploy: ${GITHUB_SHA}" --allow-empty
        git push origin gh-pages:gh-pages
