on:
  workflow_call:
    inputs:
      asset_alias_name:
        required: true
        type: string
      asset_path:
        required: true
        type: string
      new_tag:
        required: true
        type: string
      tag:
        required: true
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  deploy-github:
    runs-on: [self-hosted, v1]
    permissions:
      contents: write
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
    - name: Get assets
      run: |
        curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L -o github-api.sh \
          https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/ci/github-api.sh

    - name: Ensure clean dist
      run: |
        rm -rf dist

    - uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist

    - name: Get pre-release vars
      run: |
        source ./github-api.sh
        release_id=$(
          gh-get-release-id ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            pre-release \
                            pre_release_id
        )

        asset_id=$(
          gh-get-asset-id ${{ secrets.GITHUB_TOKEN }} \
                          ${{ github.repository }} \
                          $release_id \
                          ${{ inputs.asset_alias_name }} \
                          pre_release_asset_id
        )

    - name: Get latest vars
      if: ${{ inputs.new_tag == 'true' }}
      run: |
        source ./github-api.sh
        release_id=$(
          gh-get-release-id ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            latest \
                            latest_id
        )

        asset_id=$(
          gh-get-asset-id ${{ secrets.GITHUB_TOKEN }} \
                          ${{ github.repository }} \
                          $release_id \
                          ${{ inputs.asset_alias_name }} \
                          latest_asset_id
        )

    - name: GitHub create tag release and upload asset
      if: ${{ inputs.new_tag == 'true' }}
      run: |
        source ./github-api.sh
        gh-create-tag ${{ secrets.GITHUB_TOKEN }} \
                      ${{ github.repository }} \
                      ${{ inputs.tag }} \
                      ${{ github.sha }}

        release_id=$(
          gh-create-release ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            ${{ inputs.tag }} \
                            new_tag_release_id
        )

        gh-upload-asset ${{ secrets.GITHUB_TOKEN }} \
                        ${{ github.repository }} \
                        $release_id \
                        ${{ inputs.asset_alias_name }} \
                        ${{ inputs.asset_path }}

    - name: GitHub update pre-release target commitish
      run: |
        source ./github-api.sh
        gh-update-commitish ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            ${{ github.sha }} \
                            $pre_release_id || true

    - name: GitHub upload pre-release asset
      run: |
        source ./github-api.sh
        if [[ ! "$pre_release_asset_id" == "" ]]; then
          gh-delete-asset ${{ secrets.GITHUB_TOKEN }} \
                          ${{ github.repository }} \
                          $pre_release_asset_id
        fi

        gh-upload-asset ${{ secrets.GITHUB_TOKEN }} \
                        ${{ github.repository }} \
                        $pre_release_id \
                        ${{ inputs.asset_alias_name }} \
                        ${{ inputs.asset_path }}

    - name: GitHub update latest target commitish
      if: ${{ inputs.new_tag == 'true' }}
      run: |
        source ./github-api.sh
        gh-update-commitish ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            ${{ github.sha }} \
                            $latest_id

    - name: GitHub Upload latest asset
      if: ${{ inputs.new_tag == 'true' }}
      run: |
        source ./github-api.sh
        if [[ ! "$latest_asset_id" == "" ]]; then
          gh-delete-asset ${{ secrets.GITHUB_TOKEN }} \
                          ${{ github.repository }} \
                          $latest_asset_id
        fi

        gh-upload-asset ${{ secrets.GITHUB_TOKEN }} \
                        ${{ github.repository }} \
                        $latest_id \
                        ${{ inputs.asset_alias_name }} \
                        ${{ inputs.asset_path }}

  deploy-cloudsmith:
    runs-on: [self-hosted, v1]
    permissions:
      id-token: write
      contents: write
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
    - name: Get assets
      run: |
        curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L -o cloudsmith-api.sh \
          https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/ci/cloudsmith-api.sh

    - name: Ensure clean dist
      run: |
        rm -rf dist

    - uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist

    - uses: cloudsmith-io/cloudsmith-cli-action@v1.0.4
      env:
        CLOUDSMITH_SERVICE_SLUG: ${{ secrets.CLOUDSMITH_SERVICE_SLUG }}
      if: ${{ env.CLOUDSMITH_SERVICE_SLUG != '' }}
      with:
        oidc-namespace: ${{ vars.CLOUDSMITH_NAMESPACE }}
        oidc-service-slug: ${{ secrets.CLOUDSMITH_SERVICE_SLUG }}
        oidc-auth-only: 'true'

    - name: Cloudsmith API Key
      env:
        CLOUDSMITH_SERVICE_SLUG: ${{ secrets.CLOUDSMITH_SERVICE_SLUG }}
      if: ${{ env.CLOUDSMITH_SERVICE_SLUG == '' }}
      run: echo "CLOUDSMITH_API_KEY=${{ secrets.CLOUDSMITH_API_KEY }}" >> "$GITHUB_ENV"

    - name: Cloudsmith upload asset and create package
      if: ${{ env.CLOUDSMITH_API_KEY != '' }}
      run: |
        source ./cloudsmith-api.sh

        # push: refs/heads/<branch>
        # tag || release: refs/tags/<tag>
        # pull_request: refs/pull/<id>/merge
        tags_="${{ github.ref }}"
        if [[ "${{ github.ref }}" == refs/pull/* ]]; then
          tags_+=", refs/heads/${{ github.head_ref }}"
          tags_+=", refs/base/${{ github.base_ref }}"
        fi
        tags_+=", on/${{ github.event_name }}"

        package_file=$(
          cs-package-upload ${{ env.CLOUDSMITH_API_KEY }} \
                            ${{ vars.CLOUDSMITH_NAMESPACE }} \
                            ${{ vars.CLOUDSMITH_REPOSITORY }} \
                            ${{ inputs.asset_path }} \
                            latest_package_file
        )

        cs-package-store-python ${{ env.CLOUDSMITH_API_KEY }} \
                                ${{ vars.CLOUDSMITH_NAMESPACE }} \
                                ${{ vars.CLOUDSMITH_REPOSITORY }} \
                                $package_file \
                                "$tags_"

  deploy-gh-pages:
    runs-on: [self-hosted, v1]
    permissions:
      contents: write
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/pull/') }}

    steps:
    - uses: analogdevicesinc/doctools/gh-pages-deploy@action
      with:
        new_tag: ${{ inputs.new_tag }}
        tag: ${{ inputs.tag }}
        name: html

