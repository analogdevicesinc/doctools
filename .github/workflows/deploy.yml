on: workflow_call
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist

    - name: Get head tag, if it is new and others vars
      run: |
        tag=v$(sed -n 's/^__version__ = "\(.*\)"/\1/p' adi_doctools/__init__.py)
        echo "tag=$tag" >> "$GITHUB_ENV"
        git fetch --tags
        if ! [ $(git tag -l "$tag") ] ; then
          echo "new_tag=1" >> "$GITHUB_ENV"
        fi

        asset_name=adi-doctools.tar.gz
        echo "asset_name=$asset_name" >> "$GITHUB_ENV"

        full_asset_name=$(ls dist/adi_doctools-*.tar.gz)
        echo "full_asset_name=$full_asset_name" >> "$GITHUB_ENV"

    - name: Get pre-release vars
      run: |
        source ci/github-api.sh
        release_id=$(
          gh-get-release-id ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            pre-release \
                            pre_release_id
        )

        asset_id=$(
          gh-get-asset-id ${{ secrets.GITHUB_TOKEN }} \
                          ${{ github.repository }} \
                          $release_id \
                          pre_release_asset_id
        )

    - name: Get latest vars
      if: ${{ env.new_tag == '1' }}
      run: |
        source ci/github-api.sh
        release_id=$(
          gh-get-release-id ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            latest \
                            latest_id
        )

        asset_id=$(
          gh-get-asset-id ${{ secrets.GITHUB_TOKEN }} \
                          ${{ github.repository }} \
                          $release_id \
                          latest_asset_id
        )

    - name: Create new tag
      if: ${{ env.new_tag == '1' }}
      run: |
         git tag $tag
         git push origin $tag

    - name: Create tag release and upload asset
      if: ${{ env.new_tag == '1' }}
      run: |
        source ci/github-api.sh
        release_id=$(
          gh-create-release ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            $tag \
                            new_tag_release_id
        )

        gh-upload-asset ${{ secrets.GITHUB_TOKEN }} \
                        ${{ github.repository }} \
                        $release_id \
                        $asset_name \
                        $full_asset_name

    - name: Update pre-release target commitish
      run: |
        source ci/github-api.sh
        gh-update-commitish ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            ${{ github.sha }} \
                            $pre_release_id

    - name: Upload pre-release asset
      run: |
        source ci/github-api.sh
        if [[ ! "$pre_release_asset_id" == "" ]]; then
          gh-delete-asset ${{ secrets.GITHUB_TOKEN }} \
                          ${{ github.repository }} \
                          $pre_release_asset_id
        fi

        gh-upload-asset ${{ secrets.GITHUB_TOKEN }} \
                        ${{ github.repository }} \
                        $pre_release_id \
                        $asset_name \
                        $full_asset_name

    - name: Update latest target commitish
      if: ${{ env.new_tag == '1' }}
      run: |
        source ci/github-api.sh
        gh-update-commitish ${{ secrets.GITHUB_TOKEN }} \
                            ${{ github.repository }} \
                            ${{ github.sha }} \
                            $latest_id

    - name: Upload latest asset
      if: ${{ env.new_tag == '1' }}
      run: |
        source ci/github-api.sh
        if [[ ! "$latest_asset_id" == "" ]]; then
          gh-delete-asset ${{ secrets.GITHUB_TOKEN }} \
                          ${{ github.repository }} \
                          $latest_asset_id
        fi

        gh-upload-asset ${{ secrets.GITHUB_TOKEN }} \
                        ${{ github.repository }} \
                        $latest_id \
                        $asset_name \
                        $full_asset_name

    - run: |
        git config --global user.name "${{ github.event.head_commit.committer.name }}"
        git config --global user.email "${{ github.event.head_commit.committer.email }}"

    - name: Prepare gh-pages branch
      run: >
        git reset --hard ;
        git clean -fdx ;
        git ls-remote --exit-code --heads origin refs/heads/gh-pages &&
        (
          git fetch origin gh-pages ;
          git checkout -b gh-pages origin/gh-pages ;
          DOC_BUILDS=$(find . -mindepth 2 -name objects.inv -exec sh -c 'dirname {}' ';') ;
          git rm -r . --quiet || true ;
          printf "Detected doc builds: $DOC_BUILDS" ;
          if ! [ -z "$DOC_BUILDS" ]; then
            git checkout @ -- $DOC_BUILDS ;
          fi ;
          if [[ "$new_tag" == "1" ]]; then
            git rm -r $tag --quiet || true ;
          fi ;
        ) || (
          git checkout --orphan gh-pages ;
          git reset --hard ;
          git commit -m "initial commit" --allow-empty
        )

    - uses: actions/download-artifact@v4
      with:
        name: html

    - uses: actions/download-artifact@v4
      if: ${{ env.new_tag == '1' }}
      with:
        name: html-tagged
        path: ${{ env.tag }}

    - name: Generate aux files
      run: >
        touch .nojekyll ;
        find . -name objects.inv -exec sh -c 'dirname {}' ';' |
        cut -c 3- |
        jq --raw-input . |
        jq --slurp . > tags.json

    - name: Commit and push to gh-pages
      run: |
        git add . >> /dev/null
        git commit -m "deploy: ${GITHUB_SHA}" --allow-empty
        git push origin gh-pages:gh-pages
